0b4cdff7
8
- Separation of concerns: I think the way you structure your project is excellent. Each module has a 
single clear responsibility and it is clear to me where I have to look to find an implementation.
- External request assignment algorithm: I am unsure why you use an external request assignment 
algorithm. I am sure you have a strong reason for it but since this is quite an unexpected decision,
which comes with its drawbacks I am curious why you chose to go with this. It would be nice to see 
the source code for it alongside an explanation as to why you made this decision.
- Language consistency: I'm pretty sure this is something you would have fixed later on anyway but 
if not: It would be nice if you used either English or Norwegian in your comments and even more 
importantly your logs/print statements.
- Overview documentation: As somebody new to your codebase (and hasn't been a part of your lab 
discussions) I would have liked a short high-level overview of your overall fault tolerance strategy, 
the individual modules you use and how they interact. A few lines in a README would have helped me 
build a mental model of your project before diving into the code.
- Comments: I like your commenting style. It does a good job of explaining details about code. In 
some cases, it seems a bit redundant tho. Examples would be "oppretter global instans av 
ElevatorManager" or "starter som inaktiv". In these lines, your code is quite self-documenting and 
in my opinion, you can assume other programmers understand what's going on there. I think also try to
be more consistent, some functions have detailed comments while others have none.
- Hard coded values: In some cases, you are still hardcoding values. An example is `[4][3]bool{}` 
where you could use `datatypes.N_FLOORS` to make it easier to change things in the future.
- Duplicate `ClearAllRequests` implementation: You're implementing this function both in 
`request_utilities` and `elevator_utilities`.
- Variable naming: You do a great job naming variables. I understood their purpose in most cases, 
only the HRA acronym wasn't quite clear to me at first.

4e6144fd
9
- The code is well-structured and easy to follow, even for someone who has not been a part of the 
  project and is just looking in from the outside!
- You have used constants for command-line arguments, which helps with the readability, super nice!
- Comments are nice to have, but here there are maybe too many comments that explain something 
  selfexplanitory - eg:
  // Global instance of SharedState
  var GlobalState *SharedState
  Also, try to keep comments to one language. Writing comments in mixed language can make things 
  more confusing
- The is_testing flag is a good way to separate testing logic from the rest of the code, but consider 
  using the flag package in go! Would work great here i think
- The use of os.Args to parse command-line arguments is good
- The id variable is initialized as an empty string and later checked for emptiness. Consider 
  adding a default value or a more descriptive error message if id is empty 
- The id variable is assigned using os.Args[i+1] without checking if i+1 is within bounds. This 
  could lead to an out-of-bounds error if the --id argument is the last argument or if it is not 
  followed by a value. Small edge case/user error situation but nice to take a look at
- Theres a lot of "skeleton" here, but much of the muscle is still missing. This is perfectly 
  fine at this stage, but consider adding more informative comments or fill in the markdown files
  a little more - Maybe its in git issues that i cannot see, in that case this is perfectly fine!
Notes: 
"fmt.Printf("Unknown Arg: %s", arg)" in main.go is missing a newline command. Could be unintended
Theres also no way of turning of the testing flag, as far as i can tell. Im assuming one would just 
restart everything, but maybe add a --no-test flag argument? Not super nessecary.
I would personally refactor the main function to separate argument parsing and testing logic into 
different functions or modules.
There is also a lack of error handling at this point, but i think this part would be in the files 
that have not yet been implemented. Make sure not to forget this, as it is suepr important!!
Other than this, i think this project is looking really good, and im confident you will reach your goal 
if you keep doing exactly what youve been doing!


602c1067
5
We actually uplaoded the wrong file, this is a very old version of the build. We are not sure how this happened.
- We have a readme with detailed planning on what to do, TODOs, and other ideas, as well as other 
  markdown files for smaller ideas and other ntoes.
- Since the project is so small, its is very easy to see what does what. In my opinion, our newer 
  project is also very well-organized, but of course only we can see that, since we uploaded the wrong file.
- We have a Docker container which we can use to run tests. This is very convinient, and we have expanded 
  upon it. Now we have a bash script that automatically starts up several containers such that we dont 
  need to have several PCs to run our tests